<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lucas's Blog</title><link>https://www.lucas6.xyz/</link><description>一个专注于区块链安全/密码学和开发工具的技术博客. | A technical blog focused on blockchain security, cryptography, and developer tools.</description><generator>Hugo 0.147.7 &amp; FixIt v0.4.0-alpha-20250721024521-a1cd700b</generator><language>en</language><lastBuildDate>Mon, 20 Oct 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://www.lucas6.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>基于 YubiKey 的冷钱包探索3：使用 FIDO2 派生 KEK 加密私钥并管理以太坊地址</title><link>https://www.lucas6.xyz/posts/yubikey-coldwallet-fido-private/</link><pubDate>Mon, 20 Oct 2025 00:00:00 +0800</pubDate><guid>https://www.lucas6.xyz/posts/yubikey-coldwallet-fido-private/</guid><category domain="https://www.lucas6.xyz/categories/coldwallet/">Coldwallet</category><category domain="https://www.lucas6.xyz/categories/ethereum/">Ethereum</category><description>&lt;h2 class="heading-element" id="基于-yubikey-的冷钱包探索-3使用-fido2-派生-kek-加密私钥并管理以太坊地址">&lt;span>基于 YubiKey 的冷钱包探索 3：使用 FIDO2 派生 KEK 加密私钥并管理以太坊地址&lt;/span>
 &lt;a href="#%e5%9f%ba%e4%ba%8e-yubikey-%e7%9a%84%e5%86%b7%e9%92%b1%e5%8c%85%e6%8e%a2%e7%b4%a2-3%e4%bd%bf%e7%94%a8-fido2-%e6%b4%be%e7%94%9f-kek-%e5%8a%a0%e5%af%86%e7%a7%81%e9%92%a5%e5%b9%b6%e7%ae%a1%e7%90%86%e4%bb%a5%e5%a4%aa%e5%9d%8a%e5%9c%b0%e5%9d%80" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>本篇文章以实用与工程实现为主,介绍一个基于 YubiKey(FIDO2)PRF 扩展的本地冷钱包思路：&lt;br>
使用 YubiKey 在用户触控与 PIN 验证后对&lt;strong>每条私钥&lt;/strong>计算一次 PRF(salt),再用 HKDF-SHA256 将 PRF 输出扩展为对称密钥(KEK),以 AES-256-GCM 加密私钥并把最小必要的元数据(rp_id/credential_id/salt_prf/iv/ciphertext/address 等)写入本地 &lt;code>privkey_keystore.json&lt;/code>.后续解密需要同一 YubiKey/同一 RP ID 与同一 credential_id,并在用户同意触控/输入 PIN 后复现 KEK 解密出私钥.&lt;/p>
&lt;h2 class="heading-element" id="本文说明代码的设计逻辑关键安全考量使用方法与示例并提供源码链接与可下载的示例-keystore-结构说明">&lt;span>本文说明代码的设计逻辑/关键安全考量/使用方法与示例,并提供源码链接与可下载的示例 keystore 结构说明.&lt;/span>
 &lt;a href="#%e6%9c%ac%e6%96%87%e8%af%b4%e6%98%8e%e4%bb%a3%e7%a0%81%e7%9a%84%e8%ae%be%e8%ae%a1%e9%80%bb%e8%be%91%e5%85%b3%e9%94%ae%e5%ae%89%e5%85%a8%e8%80%83%e9%87%8f%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95%e4%b8%8e%e7%a4%ba%e4%be%8b%e5%b9%b6%e6%8f%90%e4%be%9b%e6%ba%90%e7%a0%81%e9%93%be%e6%8e%a5%e4%b8%8e%e5%8f%af%e4%b8%8b%e8%bd%bd%e7%9a%84%e7%a4%ba%e4%be%8b-keystore-%e7%bb%93%e6%9e%84%e8%af%b4%e6%98%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h2 class="heading-element" id="项目背景与目标">&lt;span>项目背景与目标&lt;/span>
 &lt;a href="#%e9%a1%b9%e7%9b%ae%e8%83%8c%e6%99%af%e4%b8%8e%e7%9b%ae%e6%a0%87" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>目标是实现一个&lt;strong>离线/本地&lt;/strong>/私钥不可导出的冷钱包工作流,其中：&lt;/p>
&lt;ul>
&lt;li>所有私钥以加密形式保存在本地(JSON keystore),当需要生成链上签名(或导出私钥)时,必须有 YubiKey 的物理接触与 PIN(如果启用).&lt;/li>
&lt;li>使用 FIDO2 的 PRF(HMAC-like)扩展作为“不可提取”的硬件辅助秘密：设备内的凭证私钥与设备固件配合,基于提供的 salt 返回 32 字节 PRF 输出.该输出再经 HKDF-SHA256 得到 KEK,用于对称加密.&lt;/li>
&lt;li>每个条目(entry)使用独立的随机 &lt;code>salt_prf&lt;/code>,避免不同私钥间 KEK 重用;加密采用 AES-256-GCM,带 AAD(包含 rp_id)防止混淆上下文.&lt;/li>
&lt;/ul>
&lt;p>设计目标要点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>最小化本地攻击面&lt;/strong>：本地文件仅包含 ciphertext/iv/salt_prf/credential_id 与 rp_id.没有私钥明文,也不存储 KEK.&lt;/li>
&lt;li>&lt;strong>物理控制&lt;/strong>：解密需要 YubiKey 的存在/用户触控(或其他用户验证),并可能需要 PIN.&lt;/li>
&lt;li>&lt;strong>可扩展&lt;/strong>：一个 credential_id 可以保护多个私钥(每个私钥独立 salt);entry 格式简单,便于导入/导出/迁移.&lt;/li>
&lt;li>&lt;strong>本地离线友好&lt;/strong>：RP 校验在实现中采用宽松模式以便本地实验(&lt;code>rp_id&lt;/code> 明确记录在 keystore 中),生产请使用真实域名并移除“宽松校验”.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 class="heading-element" id="核心设计与代码架构高层">&lt;span>核心设计与代码架构(高层)&lt;/span>
 &lt;a href="#%e6%a0%b8%e5%bf%83%e8%ae%be%e8%ae%a1%e4%b8%8e%e4%bb%a3%e7%a0%81%e6%9e%b6%e6%9e%84%e9%ab%98%e5%b1%82" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>项目主要模块/职责如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>fido2_kek.py&lt;/code>(核心)：封装与 YubiKey 通信的逻辑,提供：
&lt;ul>
&lt;li>注册发现性凭证(discoverable credential).&lt;/li>
&lt;li>调用 FIDO2 PRF 扩展计算 &lt;code>PRF(salt)&lt;/code>.&lt;/li>
&lt;li>将 &lt;code>PRF(salt)&lt;/code> 用 HKDF-SHA256 扩展为 KEK(长度可定制,默认 32 字节).&lt;/li>
&lt;li>提供高层 &lt;code>get_kek(client, credential_id_hex, info, salt_prf)&lt;/code>：若 &lt;code>salt_prf&lt;/code> 为 &lt;code>None&lt;/code>,生成随机 salt 并返回 &lt;code>(kek, salt_prf)&lt;/code>;若给定 salt,会复现同一 KEK.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>privkey_keystore.json&lt;/code>(本地 keystore)：保存 &lt;code>rp_id&lt;/code>/&lt;code>kdf&lt;/code>/&lt;code>kdfparams&lt;/code>/以及 &lt;code>entries&lt;/code> 数组.每条 entry 包含 &lt;code>id&lt;/code>/&lt;code>address&lt;/code>/&lt;code>salt_prf&lt;/code>/&lt;code>crypto&lt;/code>(cipher/iv/ciphertext).&lt;/li>
&lt;li>&lt;code>cli&lt;/code>(交互脚本)：用于生成私钥/调用 YubiKey 得到 KEK/AES-GCM 加密私钥并写入 keystore;以及读取 keystore/调用 YubiKey 得到 KEK 解密私钥.脚本提供三类操作：
&lt;ol>
&lt;li>生成并追加以太坊地址(自动生成 ECDSA/secp256k1 私钥并获得以太坊地址).&lt;/li>
&lt;li>解密某条地址获得私钥(仅在用户触控并验证后).&lt;/li>
&lt;li>创建新的 FIDO2 凭证并打印 &lt;code>rp_id&lt;/code> / &lt;code>credential_id&lt;/code>(便于备份与记录).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="为什么这样设计安全与实用性说明">&lt;span>为什么这样设计(安全与实用性说明)&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%99%e6%a0%b7%e8%ae%be%e8%ae%a1%e5%ae%89%e5%85%a8%e4%b8%8e%e5%ae%9e%e7%94%a8%e6%80%a7%e8%af%b4%e6%98%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="使用-yubikey-prf-的动机">&lt;span>使用 YubiKey PRF 的动机&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8-yubikey-prf-%e7%9a%84%e5%8a%a8%e6%9c%ba" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>YubiKey 上的 credential 私钥(用于公钥/签名)不可导出.PRF 扩展允许设备在不暴露私钥的情况下,计算基于设备私钥的 HMAC 型输出 &lt;code>PRF(salt)&lt;/code>.利用该输出作为对称密钥的种子可以实现“硬件绑定的 KEK”.&lt;/li>
&lt;li>相较于把设备上的签名私钥直接作为对称密钥(这通常不可行且语义不清),PRF 提供了一个标准化/可重复/可组合的方式来派生对称 KEK,并可以通过 &lt;code>salt&lt;/code> 和 &lt;code>info&lt;/code> 区分用途.&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="使用独立-salt_prf-的原因">&lt;span>使用独立 &lt;code>salt_prf&lt;/code> 的原因&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8%e7%8b%ac%e7%ab%8b-salt_prf-%e7%9a%84%e5%8e%9f%e5%9b%a0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>若直接对所有私钥使用相同 PRF 输入,得到的 KEK 相同,则一个被解密的私钥即泄露保护其他所有私钥的能力(即&lt;strong>同钥多条&lt;/strong>问题).通过对每条私钥使用独立随机 &lt;code>salt_prf&lt;/code>,即便使用同一 credential_id,攻击者要解密任意一条,仍需在设备上触控并提供 PIN.&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="为什么依旧用-hkdf-sha256">&lt;span>为什么依旧用 HKDF-SHA256&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%be%9d%e6%97%a7%e7%94%a8-hkdf-sha256" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>PRF 输出是 32 字节“原始”结果,将其直接作为 KEK 是可行的,但使用 HKDF 带来的好处：
&lt;ul>
&lt;li>明确区分用途：&lt;code>info&lt;/code> 字段能够在同一 credential 上派生出不同用途的 KEK(例如 &lt;code>privkey-v1&lt;/code>/&lt;code>evm-priv-v1&lt;/code>),防止不同用途的密钥互相替代或滥用.&lt;/li>
&lt;li>HKDF 提供额外的抗碰撞/拉开用途域(domain separation),是工程实践中的良好做法.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>因此流程为：&lt;code>PRF(salt)&lt;/code> → HKDF(info) → KEK → AES-256-GCM(IV, AAD)→ ciphertext.&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="aes-gcm-的-aad认证附加数据">&lt;span>AES-GCM 的 AAD(认证附加数据)&lt;/span>
 &lt;a href="#aes-gcm-%e7%9a%84-aad%e8%ae%a4%e8%af%81%e9%99%84%e5%8a%a0%e6%95%b0%e6%8d%ae" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>我们把 &lt;code>AAD = b&amp;quot;type=privkey|v=1|rp=&amp;lt;rp_id&amp;gt;&amp;quot;&lt;/code> 包含到加密中,这样在解密时会验证 AAD 是否一致,避免将同一 ciphertext 用在不同 RP 或不同用途场景下导致误解密或误用.&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="本地文件最小化存储">&lt;span>本地文件最小化存储&lt;/span>
 &lt;a href="#%e6%9c%ac%e5%9c%b0%e6%96%87%e4%bb%b6%e6%9c%80%e5%b0%8f%e5%8c%96%e5%ad%98%e5%82%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>privkey_keystore.json&lt;/code> 只保存：
&lt;ul>
&lt;li>&lt;code>rp_id&lt;/code> 与 &lt;code>credential_id&lt;/code>(标识哪把 YubiKey /凭证可解密)&lt;/li>
&lt;li>对每条私钥：&lt;code>salt_prf&lt;/code>(用于在设备上复现 PRF)/&lt;code>iv&lt;/code>/&lt;code>ciphertext&lt;/code>/已派生的 &lt;code>address&lt;/code> 以及一个 UUID &lt;code>id&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不保存 KEK/明文私钥或任何能直接伪造 PRF 的秘密.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="使用说明快速示例">&lt;span>使用说明(快速示例)&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8%e8%af%b4%e6%98%8e%e5%bf%ab%e9%80%9f%e7%a4%ba%e4%be%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>假设已安装 Python 依赖并将 YubiKey 插入,且你的 &lt;code>fido2_kek.py&lt;/code> 与 CLI 脚本在同一目录.&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>创建新的凭证并打印(可选)：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">python3 cli.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 选择：3) create new fido2 credential and print rp_id / credential_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 记录 rp_id 与 credential_id 以便备份&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>生成并追加新的以太坊地址(会在本地生成私钥/加密并写入 keystore)：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 选择：1) generate and append new ethereum address
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 输入 keystore 路径(默认 privkey_keystore.json)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 若文件不存在,会提示输入 rp_id 并在 YubiKey 上创建一个 discoverable credential(需要 PIN/触控)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 若文件存在,会读取文件中的 rp_id 与 credential_id 并复用(无需新建凭证)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 脚本会在设备上提示输入 PIN 与触控以派生 KEK(并生成 salt_prf)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>解密某个地址的私钥：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 选择：2) decrypt one address
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 选择要解密的地址序号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 脚本会向 YubiKey 请求 PRF(salt_prf)(需要 PIN/触控),并在本地用 AES-GCM 解密出私钥&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：若键盘或终端提示“Please enter your YubiKey FIDO2 PIN”,请输入 YubiKey 的 FIDO2 PIN(默认可能为空但取决于你的配置).&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="keystore-格式说明示例">&lt;span>Keystore 格式说明(示例)&lt;/span>
 &lt;a href="#keystore-%e6%a0%bc%e5%bc%8f%e8%af%b4%e6%98%8e%e7%a4%ba%e4%be%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>最小 keystore JSON(&lt;code>privkey_keystore.json&lt;/code>)示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rp_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;wallet.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;kdf&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;fido2-prf+hkdf-sha256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;kdfparams&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rp_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;wallet.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;credential_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;52f92533242c...&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;info&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;privkey-v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;entries&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;5983c3f2-1a2b-4d4f-9a8d-5b6c7d8e9f00&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x8784c4c3e34168Ab3E49dEb74937Cf8F3847dA2d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;salt_prf&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;b3f1a2... (64 hex chars)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cipher&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;aes-256-gcm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;iv&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;24 hex chars&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ciphertext&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;ciphertext hex&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关键点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>credential_id&lt;/code>：discoverable credential 的 ID(hex),用于在 YubiKey 上索引对应凭证进行 PRF.&lt;/li>
&lt;li>&lt;code>salt_prf&lt;/code>：每条 entry 的随机 32 字节(以 hex 存储),在解密时需要把它传给设备以复现 PRF 输出.&lt;/li>
&lt;li>&lt;code>iv&lt;/code> / &lt;code>ciphertext&lt;/code>：AES-GCM 的 IV 与密文.&lt;/li>
&lt;li>&lt;code>address&lt;/code>：明文保存以便快速展示,避免每次需要解密查看地址.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="安全性讨论威胁模型与防护">&lt;span>安全性讨论(威胁模型与防护)&lt;/span>
 &lt;a href="#%e5%ae%89%e5%85%a8%e6%80%a7%e8%ae%a8%e8%ae%ba%e5%a8%81%e8%83%81%e6%a8%a1%e5%9e%8b%e4%b8%8e%e9%98%b2%e6%8a%a4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="假设的威胁模型">&lt;span>假设的威胁模型&lt;/span>
 &lt;a href="#%e5%81%87%e8%ae%be%e7%9a%84%e5%a8%81%e8%83%81%e6%a8%a1%e5%9e%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>攻击者可能获得你的硬盘快照或备份(含 &lt;code>privkey_keystore.json&lt;/code>).&lt;/li>
&lt;li>攻击者可能短暂接触到你的机器,但&lt;strong>无法&lt;/strong>控制或读取 YubiKey(物理隔离).&lt;/li>
&lt;li>攻击者&lt;strong>可能&lt;/strong>获得 YubiKey(这意味着严重风险,取决于是否知道 PIN).&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="风险与减缓措施">&lt;span>风险与减缓措施&lt;/span>
 &lt;a href="#%e9%a3%8e%e9%99%a9%e4%b8%8e%e5%87%8f%e7%bc%93%e6%8e%aa%e6%96%bd" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>本地文件被泄露&lt;/strong>：文件本身仅包含 ciphertext 与 salt,无法在没有 YubiKey 的情况下解密.攻击者需要同时获得你的 YubiKey 并通过 PIN/触控才能复现 KEK.&lt;/li>
&lt;li>&lt;strong>YubiKey 被盗&lt;/strong>：若攻击者获得了 YubiKey &lt;strong>且&lt;/strong>知道/绕过了 PIN,则可解密所有条目(同一 credential 的所有条目仍需要 salt,但 salt 存储于文件;因此窃取 YubiKey + 凭证 ID + PIN 就能解密).减缓：为 YubiKey 设置 PIN,并考虑用多因素或将凭证分布到多把 YubiKey.&lt;/li>
&lt;li>&lt;strong>Side-channel / Host compromise&lt;/strong>：若主机被完全控制(恶意驱动或内核级监控),则攻击者能在用户解密时即时拷贝明文私钥或劫持签名流程.减缓：尽量在离线/受信环境中进行敏感操作;使用离线签名策略(在隔离主机或受限环境签名).&lt;/li>
&lt;li>&lt;strong>PRF / HKDF 安全&lt;/strong>：PRF 由设备实现,理论上等价于 HMAC(K_cred, salt).HKDF 是公认的安全扩展.使用 info 作为用途分离是良好实践.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 class="heading-element" id="代码关键点实现注意事项">&lt;span>代码关键点(实现注意事项)&lt;/span>
 &lt;a href="#%e4%bb%a3%e7%a0%81%e5%85%b3%e9%94%ae%e7%82%b9%e5%ae%9e%e7%8e%b0%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>对于 &lt;code>Fido2PRFClient&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>在本地实验中使用了宽松的 CDC(Client Data Collector)以避免 origin/rp 限制;&lt;strong>生产必须删除该宽松策略&lt;/strong> 并使用真实 &lt;code>rp_id&lt;/code> 与 &lt;code>origin&lt;/code>.&lt;/li>
&lt;li>操作需要用户 PIN(若启用)与触控(用户验证).&lt;/li>
&lt;li>处理 PIN 相关的错误与锁定(PIN_AUTH_BLOCKED/PIN_BLOCKED)并友好提示.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>get_kek(...)&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>若 &lt;code>salt_prf&lt;/code> 为 &lt;code>None&lt;/code>,函数会随机生成一个 32 字节 salt,调用 PRF 并返回 &lt;code>(kek, salt_prf)&lt;/code>.&lt;/li>
&lt;li>若 &lt;code>salt_prf&lt;/code> 已给定,函数只做 PRF 调用以复现之前的 KEK.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>AES-GCM：&lt;/p>
&lt;ul>
&lt;li>IV 使用 12 字节随机值.&lt;/li>
&lt;li>AAD 必须在加密与解密时一致(包含 &lt;code>rp_id&lt;/code> 有助于防止跨 RP 混用).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>错误处理：&lt;/p>
&lt;ul>
&lt;li>对文件结构/字段类型做轻量校验;解密失败会输出友好错误.&lt;/li>
&lt;li>对 YubiKey/CTAP 错误需明确区分 PIN 错误与其他错误并给出提示信息.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="相关源码">&lt;span>相关源码&lt;/span>
 &lt;a href="#%e7%9b%b8%e5%85%b3%e6%ba%90%e7%a0%81" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>fido2_kek.py&lt;/code>(派生 KEK / 与 YubiKey 交互):&lt;br>
&lt;a href="https://github.com/lucas556/yubikey-wallet/blob/main/fido2_kek.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/lucas556/yubikey-wallet/blob/main/fido2_kek.py&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>seed_keystore.py&lt;/code>(早期的 seed keystore 实现,供对比):&lt;br>
&lt;a href="https://github.com/lucas556/yubikey-wallet/blob/main/seed_keystore.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/lucas556/yubikey-wallet/blob/main/seed_keystore.py&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>建议查看上面两个文件以理解完整细节与历史演进.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="常见问题">&lt;span>常见问题&lt;/span>
 &lt;a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>&lt;strong>Q: 为什么不直接把设备上的签名私钥用于链上签名？&lt;/strong>&lt;br>
A: 有些 YubiKey 应用(OpenPGP/PIV)支持 secp256k1,因此可以在设备上直接签名链上交易(例如导出公钥用于地址),但在很多平台上 FIDO2/CTAP 的签名语义与区块链签名语义不完全一致;PRF 提供的是对称密钥派生能力,适合把 YubiKey 作为“不可导出密钥”的种子,从而保护本地私钥的加密与解密流程.&lt;/p>
&lt;p>&lt;strong>Q: PRF 输出是否可直接作为 AES 的密钥？&lt;/strong>&lt;br>
A: 技术上直接使用 PRF(salt) 的 32 字节作为 AES-256 密钥是可行的,但通过 HKDF 能够添加 &lt;code>info&lt;/code> 做用途分离并具备更明确的密钥衍生语义,因此更推荐使用 HKDF.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="总结">&lt;span>总结&lt;/span>
 &lt;a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>本文给出了一种利用 YubiKey FIDO2 PRF 扩展为本地私钥加密提供硬件绑定 KEK 的方法,权衡了工程实现与安全性.关键思想是&lt;strong>将不可导出的设备秘钥能力(PRF)作为派生对称密钥的根源&lt;/strong>,再结合每条私钥独立 salt/HKDF 用途分离与 AES-GCM 加密,达到“本地存储而不可无凭证解密”的目标.&lt;/p>
&lt;p>本文配套的示例代码实现了 CLI 工具,支持生成凭证/添加以太坊地址并加密私钥/以及在需要时用 YubiKey 解密私钥.若计划用于生产或大规模使用,请务必审计 YubiKey 配置(是否启用 PIN/是否使用真实 rp_id/origin)/审查主机安全与签名流程,并考虑更严格的硬件密钥管理策略(如多重备份/设备轮换等).&lt;/p>
&lt;hr></description></item><item><title>原火币(Huobi Global)资金提取完整指南</title><link>https://www.lucas6.xyz/posts/huobi-info-withdrawal-guide/</link><pubDate>Wed, 27 Aug 2025 23:00:00 +0800</pubDate><guid>https://www.lucas6.xyz/posts/huobi-info-withdrawal-guide/</guid><category domain="https://www.lucas6.xyz/categories/%E4%BA%A4%E6%98%93%E6%89%80/">交易所</category><category domain="https://www.lucas6.xyz/categories/%E5%AE%89%E5%85%A8/">安全</category><description>&lt;p>过去几年,火币全球站(Huobi Global)在中国大陆逐步退出市场.自 &lt;strong>2021 年 9 月 24 日&lt;/strong> 起,火币停止为大陆用户注册,并在 &lt;strong>2021 年底前&lt;/strong>完成清退工作.后来,针对仍有资产未提走的大陆用户,火币专门上线了 &lt;a href="https://www.huobi.info/"target="_blank" rel="external nofollow noopener noreferrer">&lt;strong>huobi.info&lt;/strong>&lt;/a> 页面,用于资产托管与提取.&lt;/p>
&lt;p>&lt;strong>huobi.info 是火币为中国大陆清退用户开设的专属页面,用户可以在这里查询和提取剩余数字资产.它并不是交易平台,只提供托管和提币功能.所有原火币的充币地址已经彻底作废,不能再使用.&lt;/strong>&lt;br>
&lt;strong>特别提醒：网上有很多“有偿代提”的广告,声称可以代为在 huobi.info 上提币并收取手续费.切勿相信,且完全没必要——流程自己就能完成；而且把账号信息交给第三方有巨大的资产风险.若遇到问题,直接联系官方客服(邮件回复很快)即可.&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="为什么要尽快提走">&lt;span>为什么要尽快提走？&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%b0%bd%e5%bf%ab%e6%8f%90%e8%b5%b0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>旧地址已废弃&lt;/strong>：自 &lt;strong>2022-09-15 18:00(GMT+8)&lt;/strong> 起,火币彻底停止了大陆用户的&lt;strong>充币上账&lt;/strong>.继续往旧地址充值要么不上账,要么即便上账也可能在提币时被收取 &lt;strong>500 USDT/笔&lt;/strong> 的处理费,处理期通常 &lt;strong>≥ 20 个工作日&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>huobi.info 随时可能关闭&lt;/strong>：官方表述为“暂时不会关闭”,&lt;strong>未给具体时间表&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>账户管理费&lt;/strong>：自 &lt;strong>2022-02-01&lt;/strong> 起,每月对账户进行快照并收取管理费：
&lt;ul>
&lt;li>标准 &lt;strong>0.5% / 月&lt;/strong>；&lt;/li>
&lt;li>单币种若折算为 USDT 后&lt;strong>应收不足 2 USDT&lt;/strong>,则&lt;strong>按 2 USDT 全额收取&lt;/strong>；&lt;/li>
&lt;li>自 &lt;strong>2023-01-01&lt;/strong> 起,&lt;strong>增加每月 1 日 00:00 与 15 日 24:00(GMT+8)的快照/收取规则&lt;/strong>(当月可能出现两次扣费).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>邮件提醒&lt;/strong>：你的注册邮箱会收到 &lt;strong>余额与提取提醒&lt;/strong>,以及 &lt;strong>每月管理费扣费邮件&lt;/strong>.这既能帮助你确认账户仍有余额,也是在提醒你&lt;strong>尽快提币&lt;/strong>,避免持续损耗.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="提币前需要准备">&lt;span>提币前需要准备&lt;/span>
 &lt;a href="#%e6%8f%90%e5%b8%81%e5%89%8d%e9%9c%80%e8%a6%81%e5%87%86%e5%a4%87" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>确认账户已完成 &lt;strong>实名认证(KYC)&lt;/strong>；&lt;/li>
&lt;li>至少开启两种 &lt;strong>安全措施&lt;/strong>(如手机短信 + 谷歌验证器),以获得更高的每日提币额度(最高可至 &lt;strong>5,000,000 USDT/日&lt;/strong>,具体以页面提示为准).&lt;/li>
&lt;li>若页面提示 &lt;strong>额度不足&lt;/strong>：将 &lt;strong>UID + 报错截图&lt;/strong> 发至官方邮箱 &lt;strong>&lt;a href="mailto:kefuniuniu@huobi.info"target="_blank" rel="external nofollow noopener noreferrer">kefuniuniu@huobi.info&lt;/a>&lt;/strong>,一般 &lt;strong>1–5 个工作日&lt;/strong>答复处理.&lt;/li>
&lt;li>&lt;strong>额度提升有效期通常只有 24 小时&lt;/strong>：当天未用完的额度,次日可能需要重新申请,或分多日提币.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="提币流程4-步操作">&lt;span>提币流程(4 步操作)&lt;/span>
 &lt;a href="#%e6%8f%90%e5%b8%81%e6%b5%81%e7%a8%8b4-%e6%ad%a5%e6%93%8d%e4%bd%9c" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ol>
&lt;li>访问 &lt;a href="https://www.huobi.info"target="_blank" rel="external nofollow noopener noreferrer">huobi.info&lt;/a> 并用&lt;strong>原火币账号与密码&lt;/strong>登录；&lt;/li>
&lt;li>进入 &lt;strong>资产&lt;/strong> 页面,点击 &lt;strong>提币(Withdraw)&lt;/strong>；&lt;/li>
&lt;li>选择币种 → 粘贴 &lt;strong>收款地址&lt;/strong> → 选择正确 &lt;strong>网络&lt;/strong>(如 BTC 主网 / ERC‑20 / TRC‑20 等)→ 核对 &lt;strong>手续费与到账金额&lt;/strong>；&lt;/li>
&lt;li>完成二次验证(短信/邮箱/谷歌验证码),提交后在 &lt;strong>提币记录&lt;/strong> 中查看链上进度.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>重要提示：&lt;strong>务必选对网络&lt;/strong>(例如 USDT 的 TRC‑20 vs ERC‑20),并留意是否需要 &lt;strong>Memo/Tag&lt;/strong>(如部分交易所对 XRP/EOS 等要求).网络或备注错误可能导致&lt;strong>永久丢失&lt;/strong>.&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 class="heading-element" id="常见问题与处理方法">&lt;span>常见问题与处理方法&lt;/span>
 &lt;a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%8e%e5%a4%84%e7%90%86%e6%96%b9%e6%b3%95" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="额度不足">&lt;span>额度不足&lt;/span>
 &lt;a href="#%e9%a2%9d%e5%ba%a6%e4%b8%8d%e8%b6%b3" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>即使完成了认证和安全设置,系统仍可能提示额度不够.把 &lt;strong>UID + 完整页面截图&lt;/strong> 发送至 &lt;strong>&lt;a href="mailto:kefuniuniu@huobi.info"target="_blank" rel="external nofollow noopener noreferrer">kefuniuniu@huobi.info&lt;/a>&lt;/strong>,通常 &lt;strong>1–5 个工作日&lt;/strong>内处理.&lt;/p>
&lt;h3 class="heading-element" id="丢失二次验证手机邮箱谷歌验证器">&lt;span>丢失二次验证(手机/邮箱/谷歌验证器)&lt;/span>
 &lt;a href="#%e4%b8%a2%e5%a4%b1%e4%ba%8c%e6%ac%a1%e9%aa%8c%e8%af%81%e6%89%8b%e6%9c%ba%e9%82%ae%e7%ae%b1%e8%b0%b7%e6%ad%8c%e9%aa%8c%e8%af%81%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>若手机号停用、邮箱不可用,或谷歌验证器丢失,需要走人工审核.以下为 &lt;strong>官方客服的邮件原文&lt;/strong>(节选),可直接对照准备材料：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>来自 Huobi.info 客服中心的邮件回复(节选)&lt;/strong>&lt;/p>
&lt;p>一、如您安全项丢失,申请解换绑安全项需要您提供以下材料发送至客服邮箱 &lt;strong>&lt;a href="mailto:kefuniuniu@huobi.info"target="_blank" rel="external nofollow noopener noreferrer">kefuniuniu@huobi.info&lt;/a>&lt;/strong> ,邮件主题请填写：申请解绑/换绑(手机/邮箱/谷歌验证),发送成功后工作人员预计会在 &lt;strong>15 个工作日&lt;/strong> 内处理完毕,请您留意关注邮件通知.&lt;br>
二、材料内容：&lt;br>
● 请同时手持认证证件和白纸拍摄自拍照片上传,白纸上需书写申请当天日期和申请办理业务内容&lt;br>
● 请您在邮件正文回答以下问题以便协助解换绑安全项：【直接回复邮件内】&lt;/p>
&lt;ol>
&lt;li>请说明您的姓名和身份证号码&lt;/li>
&lt;li>请提供账户绑定的邮箱/手机号码&lt;/li>
&lt;li>请您明确回复是要进行解绑还是进行换绑,如您需要换绑手机号,请您确认账户是否绑定邮箱,无绑定邮箱忽略此条问题,如绑定,绑定的邮箱是否可用,是的话可以为您直接解绑手机&lt;br>
● 注意事项：&lt;/li>
&lt;li>解换绑后 &lt;strong>24 小时内不能发起提币操作&lt;/strong>&lt;/li>
&lt;li>请务必确保您所提供的照片真实清晰,证件上的信息不可进行修改和遮挡,可看清完整证件号和姓名&lt;/li>
&lt;li>在为您解绑后,建议重新绑定谷歌验证,并&lt;strong>拍照保存二维码与密钥&lt;/strong>,以便下次找回&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>处理周期约 &lt;strong>15 个工作日&lt;/strong>,且&lt;strong>解绑后 24 小时内不可提币&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="安全提醒">&lt;span>安全提醒&lt;/span>
 &lt;a href="#%e5%ae%89%e5%85%a8%e6%8f%90%e9%86%92" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>唯一官方客服邮箱：&lt;/strong> &lt;code>kefuniuniu@huobi.info&lt;/code>&lt;/li>
&lt;li>&lt;strong>官方不会索要&lt;/strong>你的账号、密码、验证码等敏感信息；&lt;/li>
&lt;li>&lt;strong>务必忽略“有偿代提”广告&lt;/strong>：不仅&lt;strong>没有必要&lt;/strong>,还存在&lt;strong>极高盗号/盗币风险&lt;/strong>&lt;/li>
&lt;li>&lt;strong>不要再向旧火币地址充值&lt;/strong>：要么不上账,要么可能触发高额处理费与漫长处理期&lt;/li>
&lt;li>&lt;strong>留意邮箱通知&lt;/strong>：余额提示与每月管理费扣费邮件都是在提醒你尽快提走资产&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="最后提醒">&lt;span>最后提醒&lt;/span>
 &lt;a href="#%e6%9c%80%e5%90%8e%e6%8f%90%e9%86%92" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>&lt;strong>别拖延、别找第三方代提、自己按流程操作,尽快把资产安全提走.&lt;/strong>&lt;/p></description></item><item><title>区块链地址生成实战</title><link>https://www.lucas6.xyz/posts/eth-tron-address-deep-dive/</link><pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/eth-tron-address-deep-dive/</guid><category domain="https://www.lucas6.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/">区块链开发</category><description>&lt;blockquote>
&lt;p>这篇文章把可运行的 &lt;strong>完整示例代码&lt;/strong> 放在最前面,随后给出&lt;strong>逐步解析&lt;/strong>与 &lt;strong>Q&amp;amp;A&lt;/strong>.拷贝本文代码即可直接生成 ETH 与 Tron 地址,并理解背后的安全细节.&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 class="heading-element" id="一完整示例代码可直接运行">&lt;span>一、完整示例代码(可直接运行)&lt;/span>
 &lt;a href="#%e4%b8%80%e5%ae%8c%e6%95%b4%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81%e5%8f%af%e7%9b%b4%e6%8e%a5%e8%bf%90%e8%a1%8c" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="依赖安装">&lt;span>依赖安装&lt;/span>
 &lt;a href="#%e4%be%9d%e8%b5%96%e5%ae%89%e8%a3%85" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install coincurve eth_utils base58 pysha3&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>coincurve&lt;/strong>：libsecp256k1 的 Python 封装（负责 secp256k1 椭圆曲线点乘/签名等）&lt;/li>
&lt;li>&lt;strong>pysha3&lt;/strong>：以太坊使用的 Keccak-256（注意与 FIPS 的 SHA3-256 有细微差别）&lt;/li>
&lt;li>&lt;strong>eth_utils&lt;/strong>：EIP-55 校验地址&lt;/li>
&lt;li>&lt;strong>base58 + hashlib&lt;/strong>：Tron 的 Base58Check 与“双 SHA-256”校验&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="代码">&lt;span>代码&lt;/span>
 &lt;a href="#%e4%bb%a3%e7%a0%81" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">hashlib&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">base58&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sha3&lt;/span> &lt;span class="c1"># Keccak-256 (pysha3)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">coincurve&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PublicKey&lt;/span> &lt;span class="c1"># secp256k1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eth_utils&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SECP256K1_N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">keccak256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sha3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keccak_256&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">digest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 1: 生成私钥（CSPRNG + 拒绝采样；不再做额外哈希混合）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">gen_privkey_32&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">SECP256K1_N&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">priv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 2: 公钥（未压缩 64B 与压缩 33B）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">pubkey64_from_priv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv32&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pub65&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PublicKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_secret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 65B: 0x04|x|y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pub65&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span> &lt;span class="c1"># 去掉 0x04 → 64B (x||y)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">pubkey33_from_priv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv32&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">PublicKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_secret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compressed&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 33B: 0x02/0x03|x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 3: 以太坊地址（Keccak → 后 20B → EIP-55 checksum）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">eth_address_from_pub64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addr20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keccak256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;0x&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">addr20&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Step 4: Tron 地址（同源 20B → 0x41 → 双 SHA-256 → Base58Check）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">tron_address_from_pub64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addr20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keccak256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x41&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">addr20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">checksum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sha256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hashlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sha256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">digest&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">digest&lt;/span>&lt;span class="p">()[:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">base58&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b58encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">checksum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1) 私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gen_privkey_32&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2) 公钥（两种形态）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pub64&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pubkey64_from_priv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 64B,用于地址派生&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pub33&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pubkey33_from_priv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 33B,备用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3) 共同 20B（ETH 与 Tron 的共同核心）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">core20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keccak256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 4) 生成地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">eth_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eth_address_from_pub64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tron_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tron_address_from_pub64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 5) 输出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;私钥 (hex):&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">priv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;公钥(64B x||y) hex:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pub64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;公钥(33B 压缩) hex:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pub33&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;共同20B (Keccak(pub64)后20B) hex:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">core20&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ETH 地址:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eth_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;TRON 地址:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tron_addr&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 class="heading-element" id="二逐步解析为什么这样写">&lt;span>二、逐步解析(为什么这样写)&lt;/span>
 &lt;a href="#%e4%ba%8c%e9%80%90%e6%ad%a5%e8%a7%a3%e6%9e%90%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%99%e6%a0%b7%e5%86%99" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="1-随机数osurandom32-和-osurandom8--4">&lt;span>1. 随机数：&lt;code>os.urandom(32)&lt;/code> 和 &lt;code>os.urandom(8) × 4&lt;/code>&lt;/span>
 &lt;a href="#1-%e9%9a%8f%e6%9c%ba%e6%95%b0osurandom32-%e5%92%8c-osurandom8--4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>等价&lt;/strong>：两者都来自操作系统的 CSPRNG,总熵都是 256 bit.&lt;/li>
&lt;li>多次 &lt;code>os.urandom(8)&lt;/code> 并不会“更安全”,只是多了几次系统调用.&lt;/li>
&lt;li>只有在&lt;strong>合并不同熵源&lt;/strong>(例如硬件 RNG + OS RNG)时,才考虑拼接后做一次哈希白化.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>对比代码：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 一次取 32B（推荐简洁写法）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 四次 8B 再拼接（安全性等价,不更强）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="2-再次哈希是否有必要">&lt;span>2. “再次哈希”是否有必要&lt;/span>
 &lt;a href="#2-%e5%86%8d%e6%ac%a1%e5%93%88%e5%b8%8c%e6%98%af%e5%90%a6%e6%9c%89%e5%bf%85%e8%a6%81" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>目的：&lt;strong>白化/抽取&lt;/strong>随机性；在合并多个熵源或不完全信任某个熵源时有意义.&lt;/li>
&lt;li>常规桌面/服务器系统：&lt;code>os.urandom(32)&lt;/code> 已足够安全；为保持简洁与可审计,本文不再做额外哈希.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>如果确实要合并熵源,可这样：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 或者 加上硬件 RNG&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sha256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">digest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 之后仍需做范围校验（拒绝采样）&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="3-取模-vs-拒绝采样为何脚本里有-while-true">&lt;span>3. 取模 vs 拒绝采样（为何脚本里有 while True）&lt;/span>
 &lt;a href="#3-%e5%8f%96%e6%a8%a1-vs-%e6%8b%92%e7%bb%9d%e9%87%87%e6%a0%b7%e4%b8%ba%e4%bd%95%e8%84%9a%e6%9c%ac%e9%87%8c%e6%9c%89-while-true" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>取模&lt;/strong>：&lt;code>d = r % n&lt;/code> 实现简单,但因 &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>256&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{256}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">256&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> 不是 &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.4306em;">&lt;/span>&lt;span class="mord mathnormal">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> 的整倍数,会产生&lt;strong>极小分布偏差&lt;/strong>（约 2^-128）.&lt;/li>
&lt;li>&lt;strong>拒绝采样（推荐）&lt;/strong>：生成 32B,若 &lt;code>d &amp;gt;= n&lt;/code> 则丢弃重来；因 &lt;span class="katex-error" title="ParseError: KaTeX parse error: Unexpected character: &amp;#x27;&amp;#x27; at position 3: n ̲pprox 2^{256}" style="color:#ff4949">n pprox 2^{256}&lt;/span>,几乎总是一次成功,且&lt;strong>分布严格均匀&lt;/strong>.&lt;/li>
&lt;li>&lt;code>while True:&lt;/code> 就是在表达“拒绝采样”,不是要循环很多次.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;big&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">SECP256K1_N&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">priv&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="4-公钥两种形态-为什么同时输出-64b-与-33b">&lt;span>4. 公钥两种形态: 为什么同时输出 64B 与 33B&lt;/span>
 &lt;a href="#4-%e5%85%ac%e9%92%a5%e4%b8%a4%e7%a7%8d%e5%bd%a2%e6%80%81-%e4%b8%ba%e4%bb%80%e4%b9%88%e5%90%8c%e6%97%b6%e8%be%93%e5%87%ba-64b-%e4%b8%8e-33b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>未压缩公钥&lt;/strong>：&lt;code>0x04 || x(32B) || y(32B)&lt;/code>；派生地址时,规范是用去掉前缀 &lt;code>0x04&lt;/code> 的 &lt;strong>64B (x||y)&lt;/strong> 做 Keccak.&lt;/li>
&lt;li>&lt;strong>压缩公钥&lt;/strong>：&lt;code>0x02/0x03 || x(32B)&lt;/code>；常用于网络/链上存储、更省空间.&lt;/li>
&lt;li>实战里两者都常用,脚本里一并输出更方便.&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="5-共同-20b以太坊与-tron-地址的共同核心">&lt;span>5. &amp;ldquo;共同 20B&amp;rdquo;：以太坊与 Tron 地址的共同核心&lt;/span>
 &lt;a href="#5-%e5%85%b1%e5%90%8c-20b%e4%bb%a5%e5%a4%aa%e5%9d%8a%e4%b8%8e-tron-%e5%9c%b0%e5%9d%80%e7%9a%84%e5%85%b1%e5%90%8c%e6%a0%b8%e5%bf%83" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ul>
&lt;li>定义：&lt;code>Keccak-256(pub64)&lt;/code> 的&lt;strong>后 20 字节&lt;/strong>.&lt;/li>
&lt;li>以太坊：共同 20B → 十六进制 → &lt;strong>EIP-55&lt;/strong> 校验（大小写混合）.&lt;/li>
&lt;li>Tron：共同 20B → 前缀 &lt;code>0x41&lt;/code> → &lt;strong>双 SHA-256&lt;/strong> 取前 4B 校验 → &lt;strong>Base58Check&lt;/strong> 编码（&lt;code>T...&lt;/code>）.&lt;/li>
&lt;li>&lt;strong>意义&lt;/strong>：同一私钥在两条链上的“共同 20B”一致,可用于&lt;strong>跨链同源校验&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="三常见问答qa">&lt;span>三、常见问答(Q&amp;amp;A)&lt;/span>
 &lt;a href="#%e4%b8%89%e5%b8%b8%e8%a7%81%e9%97%ae%e7%ad%94qa" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>&lt;strong>Q1：为何不能使用 coincurve替代 hashlib / pysha3？&lt;/strong>&lt;br>
A：&lt;code>coincurve&lt;/code> 负责椭圆曲线(secp256k1)运算；地址生成需要 &lt;strong>Keccak-256&lt;/strong>(&lt;code>pysha3&lt;/code>)与 &lt;strong>SHA-256&lt;/strong>(&lt;code>hashlib&lt;/code>,Tron 的双哈希校验),以及 &lt;strong>Base58Check&lt;/strong>（&lt;code>base58&lt;/code>）.&lt;/p>
&lt;p>&lt;strong>Q2：为什么不使用 &lt;code>hashlib.sha3_256&lt;/code>？&lt;/strong>&lt;br>
A：以太坊使用的是“pre‑FIPS”的 &lt;strong>Keccak-256&lt;/strong>,与 &lt;code>hashlib.sha3_256&lt;/code>（FIPS SHA3-256）有细微差别,因此选择 &lt;code>pysha3&lt;/code> 的 &lt;code>sha3.keccak_256()&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Q3：拒绝采样会不会卡住？&lt;/strong>&lt;br>
A：不会.因 &lt;span class="katex-error" title="ParseError: KaTeX parse error: Unexpected character: &amp;#x27;&amp;#x27; at position 3: n ̲pprox 2^{256}" style="color:#ff4949">n pprox 2^{256}&lt;/span>,超界概率约 3.7×10^-39,几乎总是一次成功.&lt;/p>
&lt;p>&lt;strong>Q4：Tron 地址为什么要双 SHA-256 + Base58Check？&lt;/strong>&lt;br>
A：这是一种 &lt;strong>人类友好且带校验&lt;/strong> 的编码风格,起源于比特币地址规范,能有效降低抄写/传输错误.&lt;/p>
&lt;p>&lt;strong>Q5：是否可以直接用 libsecp256k1（C 库）而不用 coincurve？&lt;/strong>&lt;br>
A：完全可以.&lt;code>coincurve&lt;/code> 本质是对 libsecp256k1 的 Python 封装；若写 C/C++/Rust/Go,直接用原生库会更硬核与高性能.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="四要点速记tldr">&lt;span>四、要点速记（TL;DR）&lt;/span>
 &lt;a href="#%e5%9b%9b%e8%a6%81%e7%82%b9%e9%80%9f%e8%ae%b0tldr" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;code>os.urandom(32)&lt;/code> 足够安全；&lt;code>os.urandom(8) × 4&lt;/code> 并不会更安全.&lt;/li>
&lt;li>“再次哈希”仅在&lt;strong>合并独立熵源&lt;/strong>时有意义；常规环境不必.&lt;/li>
&lt;li>&lt;strong>拒绝采样&lt;/strong>优于“取模”,能确保私钥分布&lt;strong>严格均匀&lt;/strong>.&lt;/li>
&lt;li>生成地址要用未压缩公钥的 &lt;strong>64B (x||y)&lt;/strong> 作为 Keccak 输入；压缩公钥 &lt;strong>33B&lt;/strong> 适合存储/传输.&lt;/li>
&lt;li>&lt;strong>共同 20B&lt;/strong>：ETH 与 Tron 地址的共同核心；ETH 是 Hex+EIP‑55,Tron 是 &lt;code>0x41&lt;/code> 前缀 + 双 SHA-256 + Base58Check.&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>区块链安全:构建主动防御节点阻止钱包欺诈交易</title><link>https://www.lucas6.xyz/posts/building-safety-nodes/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/building-safety-nodes/</guid><description>&lt;p>随着区块链应用的普及,欺诈行为日益频繁.据 Chainalysis 报告,2024年加密资产犯罪活动导致损失超过40亿美元,其中因授权类诈骗损失达20%.这类欺诈通常涉及诱导用户签署恶意授权交易,而对于普通用户而言,这类授权功能往往是非必要的.&lt;/p>
&lt;h2 class="heading-element" id="常见的欺诈类型及典型案例">&lt;span>常见的欺诈类型及典型案例&lt;/span>
 &lt;a href="#%e5%b8%b8%e8%a7%81%e7%9a%84%e6%ac%ba%e8%af%88%e7%b1%bb%e5%9e%8b%e5%8f%8a%e5%85%b8%e5%9e%8b%e6%a1%88%e4%be%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>钓鱼网站诈骗&lt;/strong>：攻击者伪装成知名项目或钱包的官网,引诱用户进行无限授权.如著名的MetaMask假网站案件,数百万美元资产因此被盗.&lt;/li>
&lt;li>&lt;strong>空投诈骗&lt;/strong>：虚假的免费代币或NFT空投,引导用户签署无限授权合约,如近期的Blur假空投诈骗导致大量用户资产被窃取.&lt;/li>
&lt;li>&lt;strong>虚假挖矿投资&lt;/strong>：承诺高额收益,实际骗取用户授权后转移资产,如 &amp;ldquo;Luna Mining&amp;rdquo; 诈骗事件.&lt;/li>
&lt;li>&lt;strong>DEX授权诈骗&lt;/strong>：攻击者在去中心化交易所内误导用户进行无限授权,如 PancakeSwap 假合约事件.&lt;/li>
&lt;/ol>
&lt;p>由于普通用户日常使用钱包并不经常涉及需要授权的场景,因此通过设置主动防御节点,能够有效降低此类风险.这种节点会在用户签署交易之后;真正广播到区块链网络之前,自动检查交易内容并过滤掉可能存在危险的授权交易.这种机制不仅适用于以太坊,也适用于其他基于EVM的区块链网络(例如币安智能链 BSC; Polygon; Tron等).&lt;/p>
&lt;h2 class="heading-element" id="如何有效预防">&lt;span>如何有效预防&lt;/span>
 &lt;a href="#%e5%a6%82%e4%bd%95%e6%9c%89%e6%95%88%e9%a2%84%e9%98%b2" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>谨慎访问未知链接,避免轻易授权.&lt;/li>
&lt;li>签署钱包交易前仔细核对合约地址与交易详情.&lt;/li>
&lt;li>使用主动防御节点或自定义安全节点对所有交易进行自动检查.&lt;/li>
&lt;li>定期审查钱包授权状态,撤销不必要的授权.&lt;/li>
&lt;/ul>
&lt;h2 class="heading-element" id="技术实现原理与操作细节">&lt;span>技术实现原理与操作细节&lt;/span>
 &lt;a href="#%e6%8a%80%e6%9c%af%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%bb%86%e8%8a%82" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>为了防范上述欺诈风险,本文采用 &lt;strong>Cloudflare Worker&lt;/strong> 与 &lt;strong>Infura&lt;/strong> 搭建主动防御节点，对高风险授权交易进行拦截。该节点作为交易检查中继，工作流程如下：&lt;/p>
&lt;ol>
&lt;li>用户在钱包中签署交易后,交易首先发送至 Cloudflare Worker 进行安全检查&lt;/li>
&lt;li>只有通过检查的交易,才会被转发至以太坊主网节点(例如 Infura)进行广播&lt;/li>
&lt;/ol>
&lt;p>此外,由于 Cloudflare Worker 部署在边缘网络,还能有效隐藏用户真实 IP,从而增强隐私保护.&lt;/p>
&lt;p>具体拦截规则包括:&lt;/p>
&lt;ul>
&lt;li>拦截高风险授权函数签名（例如&lt;code>approve&lt;/code>;&lt;code>increaseAllowance&lt;/code>;&lt;code>setApprovalForAll&lt;/code>）.&lt;/li>
&lt;li>阻止与黑名单合约地址进行任何交互.&lt;/li>
&lt;li>设置资产转移白名单,只允许向信任地址进行转账.&lt;/li>
&lt;/ul>
&lt;h2 class="heading-element" id="cloudflare-worker详细代码实现">&lt;span>Cloudflare Worker详细代码实现&lt;/span>
 &lt;a href="#cloudflare-worker%e8%af%a6%e7%bb%86%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 此代码未经测试;实际部署中需要测试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">BLOCKED_SELECTORS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;0x095ea7b3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// approve
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s1">&amp;#39;0x39509351&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// increaseAllowance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s1">&amp;#39;0xa22cb465&amp;#39;&lt;/span> &lt;span class="c1">// setApprovalForAll
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">BLACKLIST_CONTRACTS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;0xdeaddeaddeaddeaddeaddeaddeaddeaddeadbeef&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;0x1234567890abcdef1234567890abcdef12345678&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">ENABLE_WHITELIST&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">WHITELIST_RECIPIENTS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">method&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Only POST allowed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">405&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tx&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">BLOCKED_SELECTORS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sig&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sig&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;已拦截危险授权交易&amp;#39;&lt;/span> &lt;span class="p">}),&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">to&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">BLACKLIST_CONTRACTS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">has&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;目标地址属于黑名单合约&amp;#39;&lt;/span> &lt;span class="p">}),&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ENABLE_WHITELIST&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">WHITELIST_RECIPIENTS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">has&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;非白名单地址禁止转账&amp;#39;&lt;/span> &lt;span class="p">}),&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;application/json&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 class="heading-element" id="具体部署操作步骤">&lt;span>具体部署操作步骤&lt;/span>
 &lt;a href="#%e5%85%b7%e4%bd%93%e9%83%a8%e7%bd%b2%e6%93%8d%e4%bd%9c%e6%ad%a5%e9%aa%a4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ol>
&lt;li>登录&lt;a href="https://workers.cloudflare.com/"target="_blank" rel="external nofollow noopener noreferrer">Cloudflare Workers&lt;/a>后台.&lt;/li>
&lt;li>创建新的Worker,复制上述代码到编辑器中.&lt;/li>
&lt;li>替换代码中的&lt;code>YOUR_INFURA_PROJECT_ID&lt;/code>为你个人的Infura项目ID.&lt;/li>
&lt;li>点击&amp;quot;保存并部署&amp;quot;,获得Worker节点URL,如 &lt;code>https://your-worker.workers.dev&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 class="heading-element" id="钱包配置实例参考">&lt;span>钱包配置实例参考&lt;/span>
 &lt;a href="#%e9%92%b1%e5%8c%85%e9%85%8d%e7%bd%ae%e5%ae%9e%e4%be%8b%e5%8f%82%e8%80%83" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>进入钱包设置 &amp;ndash;&amp;gt; 网络 &amp;ndash;&amp;gt; 添加新网络.&lt;/li>
&lt;li>网络名称填入&amp;quot;主动防御节点&amp;quot;.&lt;/li>
&lt;li>RPC URL 填入上述 Worker URL.&lt;/li>
&lt;li>Chain ID填写为1,符号ETH.(有些钱包只需要填写prc地址)&lt;/li>
&lt;/ul>
&lt;p>设置后,钱包发出的交易都会先经过此节点检查再上链.&lt;/p>
&lt;h2 class="heading-element" id="实际使用注意事项">&lt;span>实际使用注意事项&lt;/span>
 &lt;a href="#%e5%ae%9e%e9%99%85%e4%bd%bf%e7%94%a8%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>如果你经常使用去中心化交易所(DEX),直接使用此节点可能导致交易失败,这是因为DEX需要授权函数调用.&lt;/p>
&lt;p>建议方案包括：&lt;/p>
&lt;ul>
&lt;li>将安全且频繁使用的DEX授权合约加入白名单.&lt;/li>
&lt;li>对于需要频繁授权的交易,使用单独的钱包,以减少资产风险.&lt;/li>
&lt;/ul>
&lt;h2 class="heading-element" id="总结与扩展建议">&lt;span>总结与扩展建议&lt;/span>
 &lt;a href="#%e6%80%bb%e7%bb%93%e4%b8%8e%e6%89%a9%e5%b1%95%e5%bb%ba%e8%ae%ae" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>通过主动防御节点,我们能有效防范区块链授权类诈骗,保护资产安全.本方案除了以太坊外,同样适用于币安智能链(BSC);Polygon等EVM兼容链,实际使用时只需更换相应RPC地址.&lt;/p>
&lt;p>未来还可考虑集成诈骗地址实时数据库;报警通知系统（如Telegram或钉钉）,进一步提升安全性.&lt;/p></description></item><item><title>基于 YubiKey 的冷钱包探索 2：使用 GPG 私钥生成以太坊地址</title><link>https://www.lucas6.xyz/posts/yubikey-coldwallet-gpgkey-ethaddress/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/yubikey-coldwallet-gpgkey-ethaddress/</guid><category domain="https://www.lucas6.xyz/categories/blockchain/">Blockchain</category><category domain="https://www.lucas6.xyz/categories/security/">Security</category><description>&lt;h2 class="heading-element" id="背景与前文回顾">&lt;span>背景与前文回顾&lt;/span>
 &lt;a href="#%e8%83%8c%e6%99%af%e4%b8%8e%e5%89%8d%e6%96%87%e5%9b%9e%e9%a1%be" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>本文是 &lt;a href="https://www.lucas6.xyz/posts/yubikey-coldwallet-gpgpub-ethaddress/"target="_blank" rel="external nofollow noopener noreferrer">基于 YubiKey 的冷钱包探索:使用 GPG 公钥生成以太坊地址&lt;/a> 的延续.&lt;/p>
&lt;p>上一篇文章中,通过 &lt;strong>GPG 公钥的 ECPoint&lt;/strong> 成功计算出了对应的 Ethereum 地址,用于验证 YubiKey 中的公钥是否匹配链上的地址.&lt;/p>
&lt;p>但现实中,GPG 导出的公钥可能只是为了验证正确性,&lt;strong>更重要的是将 GPG 私钥转为 Ethereum 私钥,构造完整的钱包逻辑&lt;/strong>.这正是本篇要解决的问题.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="目标与思路">&lt;span>目标与思路&lt;/span>
 &lt;a href="#%e7%9b%ae%e6%a0%87%e4%b8%8e%e6%80%9d%e8%b7%af" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>&lt;strong>目标:&lt;/strong> 从 YubiKey 导出的 GPG 私钥中,提取出 secp256k1 标量私钥,转换为标准 Ethereum 私钥,并派生出公钥与地址.&lt;/p>
&lt;p>这将验证:&lt;/p>
&lt;blockquote>
&lt;p>GPG 保存的 secp256k1 私钥能否兼容以太坊签名&lt;br>
GPG 直接生成 Ethereum 钱包地址,构建冷钱包体系&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 class="heading-element" id="使用脚本">&lt;span>使用脚本&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8%e8%84%9a%e6%9c%ac" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>核心逻辑代码:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pgpy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PGPKey&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eth_keys&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eth_utils&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 读取 privkey.asc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;privkey.asc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 加载 GPG 私钥对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PGPKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blob&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 提取 secp256k1 私钥标量（即 Ethereum 私钥）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keymaterial&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 转为标准 Ethereum 私钥 hex 字符串&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eth_privkey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ethereum 私钥 (hex):&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eth_privkey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4. 派生 Ethereum 公钥与地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priv_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PrivateKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">eth_privkey&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ethereum 公钥:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">priv_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">public_key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eth_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">priv_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">public_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_address&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ethereum 地址:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eth_address&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 class="heading-element" id="脚本逻辑说明">&lt;span>脚本逻辑说明&lt;/span>
 &lt;a href="#%e8%84%9a%e6%9c%ac%e9%80%bb%e8%be%91%e8%af%b4%e6%98%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="1-读取并解析-gpg-私钥">&lt;span>1. 读取并解析 GPG 私钥&lt;/span>
 &lt;a href="#1-%e8%af%bb%e5%8f%96%e5%b9%b6%e8%a7%a3%e6%9e%90-gpg-%e7%a7%81%e9%92%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>从 &lt;code>privkey.asc&lt;/code> 中加载私钥对象,并解析出其 &lt;code>.s&lt;/code> 字段,即 secp256k1 的标量 &lt;code>d&lt;/code> 值.这个值就是以太坊钱包最核心的 256 位私钥.&lt;/p>
&lt;h3 class="heading-element" id="2-转换为-ethereum-标准私钥格式">&lt;span>2. 转换为 Ethereum 标准私钥格式&lt;/span>
 &lt;a href="#2-%e8%bd%ac%e6%8d%a2%e4%b8%ba-ethereum-%e6%a0%87%e5%87%86%e7%a7%81%e9%92%a5%e6%a0%bc%e5%bc%8f" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>将私钥标量转成 32 字节并以 &lt;code>hex&lt;/code> 显示,便于导入钱包或进行加密签名.&lt;/p>
&lt;h3 class="heading-element" id="3-派生公钥与地址">&lt;span>3. 派生公钥与地址&lt;/span>
 &lt;a href="#3-%e6%b4%be%e7%94%9f%e5%85%ac%e9%92%a5%e4%b8%8e%e5%9c%b0%e5%9d%80" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>借助 &lt;code>eth_keys&lt;/code> 库：&lt;/p>
&lt;ul>
&lt;li>通过私钥计算出对应的公钥（未压缩格式）&lt;/li>
&lt;li>使用 keccak(公钥)[-20:] 获取以太坊地址&lt;/li>
&lt;li>加上 checksum,构造最终地址&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="关键验证地址一致性">&lt;span>关键验证:地址一致性&lt;/span>
 &lt;a href="#%e5%85%b3%e9%94%ae%e9%aa%8c%e8%af%81%e5%9c%b0%e5%9d%80%e4%b8%80%e8%87%b4%e6%80%a7" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>你可以将此脚本派生出的地址,与上一篇文章通过 GPG 公钥派生的地址进行比对 —— &lt;strong>两者应该完全一致&lt;/strong>.&lt;/p>
&lt;p>这验证了 GPG 私钥和 Ethereum 私钥的格式兼容性.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="应用场景">&lt;span>应用场景&lt;/span>
 &lt;a href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>结合上下两篇文章,可以得出一个清晰结论:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>YubiKey 中通过 GPG 模式生成的 secp256k1 密钥,可以直接作为以太坊私钥使用.&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>这代表着:&lt;/p>
&lt;ul>
&lt;li>使用 YubiKey 生成 GPG 密钥对作为冷钱包&lt;/li>
&lt;li>通过公钥计算以太坊地址,进行链上收款或身份验证&lt;/li>
&lt;li>通过 yubikey 恢复地址并参与交易签名&lt;/li>
&lt;li>使用 YubiKey 签名离线交易,再转到链上广播&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="最后">&lt;span>最后&lt;/span>
 &lt;a href="#%e6%9c%80%e5%90%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>利用这一方法,可以验证 YubiKey 中保存的密钥是否对应某个以太坊地址,并以 GPG 格式参与链上签名或身份认证.这为构建一个安全、去信任的冷钱包方案,提供了全新的实现路径.&lt;/p>
&lt;p>在构建以太坊硬件钱包/冷签名系统/身份验证机制中,YubiKey 与 GPG 将是一个安全/稳定且灵活的基础设施.&lt;/p></description></item><item><title>基于 YubiKey 的冷钱包探索:使用 GPG 公钥生成以太坊地址</title><link>https://www.lucas6.xyz/posts/yubikey-coldwallet-gpgpub-ethaddress/</link><pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/yubikey-coldwallet-gpgpub-ethaddress/</guid><category domain="https://www.lucas6.xyz/categories/hardware-wallet/">Hardware Wallet</category><category domain="https://www.lucas6.xyz/categories/ethereum/">Ethereum</category><description>&lt;p>在区块链的世界中,如何安全保管私钥始终是一个核心问题.YubiKey 作为一款硬件安全密钥,长期被用于 SSH 和 GPG 签名.我们尝试探索一个方向:&lt;/p>
&lt;p>&lt;strong>是否可以用 YubiKey 来构建一个离线;不可提取私钥的冷钱包?&lt;/strong>&lt;/p>
&lt;p>在实际调研中发现,YubiKey 的 OpenPGP 模块支持自定义算法,其中包括 secp256k1.虽然它并非以太坊原生格式的密钥,但通过提取 GPG 公钥中的 EC 点数据(即未压缩公钥),我们仍然可以导出与以太坊地址对应的 Keccak-256 哈希,从而进行地址验证.&lt;/p>
&lt;p>本文将介绍如何从一个导出的 GPG 公钥(ASCII 格式)中恢复未压缩的 secp256k1 公钥,并转换为对应的以太坊地址.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="gpg-生成-secp256k1-密钥">&lt;span>GPG 生成 secp256k1 密钥&lt;/span>
 &lt;a href="#gpg-%e7%94%9f%e6%88%90-secp256k1-%e5%af%86%e9%92%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>确保你的 GPG 支持 &lt;code>secp256k1&lt;/code>(需要 gnupg &amp;gt;= 2.2.27):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --full-generate-key&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在交互菜单中选择:&lt;/p>
&lt;ul>
&lt;li>密钥类型:&lt;code>ECC&lt;/code> 或 &lt;code>ECC and ECC&lt;/code>&lt;/li>
&lt;li>曲线选择:&lt;code>secp256k1&lt;/code>&lt;/li>
&lt;li>有效期/用户名/邮箱等按需输入&lt;/li>
&lt;li>设置密码(可以不设置)&lt;/li>
&lt;/ul>
&lt;p>然后使用以下命令导出公钥:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --export-options export-reset-subkey-passwd --export YOUR_KEY_ID &amp;gt; pubkey.asc&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 class="heading-element" id="实现逻辑概览">&lt;span>实现逻辑概览&lt;/span>
 &lt;a href="#%e5%ae%9e%e7%8e%b0%e9%80%bb%e8%be%91%e6%a6%82%e8%a7%88" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ol>
&lt;li>使用 &lt;code>PGPy&lt;/code> 解析 ASCII 格式的 GPG 公钥(&lt;code>.asc&lt;/code> 文件)&lt;/li>
&lt;li>提取公钥中嵌入的 ECPoint(未压缩椭圆曲线公钥)&lt;/li>
&lt;li>使用以太坊标准(Keccak-256)计算地址&lt;/li>
&lt;li>得到标准 Ethereum 地址,可用于匹配与验证&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 class="heading-element" id="安装依赖">&lt;span>安装依赖&lt;/span>
 &lt;a href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install pgpy eth-utils&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 class="heading-element" id="脚本示例">&lt;span>脚本示例&lt;/span>
 &lt;a href="#%e8%84%9a%e6%9c%ac%e7%a4%ba%e4%be%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pgpy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PGPKey&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eth_utils&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">keccak&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">extract_pubkey_from_gpg_ascii&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PGPKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blob&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 获取 ECPoint 对象 → 转为 MPI bytes(2字节bitlen + 65字节数据)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mpi_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keymaterial&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_mpibytes&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 解析 MPI → 跳过前2字节bit长度&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bitlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;H&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mpi_bytes&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keydata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mpi_bytes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keydata&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">65&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">keydata&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mh">0x04&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;不是未压缩 secp256k1 公钥&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">keydata&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">pubkey_to_eth_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pubkey_bytes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keccak_digest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keccak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pubkey_bytes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:])[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">to_checksum_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;0x&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">keccak_digest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 主程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pubkey_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extract_pubkey_from_gpg_ascii&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pubkey.asc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ethereum Pubkey:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pubkey_bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eth_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pubkey_to_eth_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pubkey_bytes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ethereum address:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eth_address&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 class="heading-element" id="注意事项">&lt;span>注意事项&lt;/span>
 &lt;a href="#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>该方法要求密钥为 &lt;strong>未压缩的 secp256k1 公钥&lt;/strong>&lt;/li>
&lt;li>当前支持的是 GPG 主密钥或子密钥使用 secp256k1 算法的情况&lt;/li>
&lt;li>若使用的是 RSA 或 ed25519,无法用于 Ethereum 地址恢复&lt;/li>
&lt;li>要确保 &lt;code>pgpy&lt;/code> 能正确读取你的密钥文件格式&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="应用场景">&lt;span>应用场景&lt;/span>
 &lt;a href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>这种方式的核心意义在于:&lt;/p>
&lt;ul>
&lt;li>可以利用 YubiKey 的 GPG 模块中的密钥做链上身份验证&lt;/li>
&lt;li>&lt;strong>无需导出私钥&lt;/strong>,确保密钥仅存在于硬件中&lt;/li>
&lt;li>适用于构建&lt;strong>离线冷钱包&lt;/strong>或硬件签名设备&lt;/li>
&lt;li>可搭配 GPG 签名对离线交易或消息进行认证,验证签名对应的 Ethereum 地址是否一致&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>利用这一方法,可以验证 YubiKey 中保存的密钥是否对应某个以太坊地址,并以 GPG 格式参与链上签名或身份认证.这为构建一个安全/去信任的冷钱包方案,提供了全新的实现路径.&lt;/p></description></item><item><title>用 bitcoin2john 和 hashcat 爆破 wallet.dat 密码</title><link>https://www.lucas6.xyz/posts/bitcoin2john-hashcat-brute-wallet-passwd/</link><pubDate>Sat, 26 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/bitcoin2john-hashcat-brute-wallet-passwd/</guid><category domain="https://www.lucas6.xyz/categories/blockchain/">Blockchain</category><category domain="https://www.lucas6.xyz/categories/security/">Security</category><description>&lt;p>在较早期的 Bitcoin Core 钱包中,私钥是保存在一个名为 &lt;code>wallet.dat&lt;/code> 的加密文件里.很多人在创建钱包时设置了密码用于保护私钥,但多年之后很可能已经忘记了当初的密码.如果没有这个密码,&lt;code>wallet.dat&lt;/code> 是无法解锁的.&lt;/p>
&lt;p>目前并不存在可以绕过该加密机制的“万能工具”.即便有类似声称支持恢复的软件或服务,多数也只能破解弱密码,甚至可能是恶意诱导用户上传钱包文件的骗局.&lt;/p>
&lt;p>不过,由于 Bitcoin Core 使用的是标准的 &lt;code>PBKDF2-HMAC-SHA512&lt;/code> 作为加密算法,我们可以借助 &lt;code>bitcoin2john&lt;/code> 提取哈希,再用 &lt;code>hashcat&lt;/code> 进行暴力破解(太复杂密码不可能破解).&lt;/p>
&lt;p>这篇文章将完整演示这个过程.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="提取-walletdat-哈希">&lt;span>提取 wallet.dat 哈希&lt;/span>
 &lt;a href="#%e6%8f%90%e5%8f%96-walletdat-%e5%93%88%e5%b8%8c" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>从 Bitcoin Core 的文件夹中提取出&lt;code>wallet.dat&lt;/code> 文件.&lt;/p>
&lt;p>然后需要使用 &lt;code>bitcoin2john.py&lt;/code> 脚本将加密的 &lt;code>wallet.dat&lt;/code> 文件转为 hashcat 支持的格式.&lt;/p>
&lt;p>注意：John 官方的原始版本在一些新环境（如 Ubuntu 22.04 + Python 3.10）上已经不可用.推荐使用这个修复后的版本：&lt;/p>
&lt;p>&lt;a href="https://github.com/lucas556/btc_wallet-recover/blob/main/bitcoin2john.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/lucas556/btc_wallet-recover/blob/main/bitcoin2john.py&lt;/a>&lt;/p>
&lt;p>此外,该脚本依赖 &lt;code>berkeleydb&lt;/code>,你需要先安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install berkeleydb&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行提取命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 bitcoin2john.py wallet.dat&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出结果类似：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$bitcoin$64$6dabee7730bb1d6f20f7f8019ef2fc8922753f35cb258a52add31114899e19fd$16$70813ad5382f7a5a$166925$2$00$2$00&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存这行哈希到一个文件,比如 &lt;code>wallet.hash&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="使用-hashcat-进行破解">&lt;span>使用 hashcat 进行破解&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8-hashcat-%e8%bf%9b%e8%a1%8c%e7%a0%b4%e8%a7%a3" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>接下来我们使用 hashcat 对刚才提取的哈希进行爆破.下面以尝试 6 到 9 位纯数字密码为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hashcat -m &lt;span class="m">11300&lt;/span> wallet.hash -a &lt;span class="m">3&lt;/span> ?d?d?d?d?d?d --increment --increment-min&lt;span class="o">=&lt;/span>&lt;span class="m">6&lt;/span> --increment-max&lt;span class="o">=&lt;/span>&lt;span class="m">9&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你使用的是独立显卡,可以使用以下方式启用 GPU：&lt;/p>
&lt;p>需要安装nvcc(nvidia),参考: &lt;a href="https://lucas5.xyz/posts/0909320100/"target="_blank" rel="external nofollow noopener noreferrer">https://lucas5.xyz/posts/0909320100/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./hashcat.bin -m &lt;span class="m">11300&lt;/span> ../wallet.hash -a &lt;span class="m">3&lt;/span> ?d?d?d?d?d?d --increment --backend-ignore-opencl --force&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>参数说明：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>-m 11300&lt;/code>：指定 wallet.dat 所用的哈希算法（Bitcoin Core）&lt;/li>
&lt;li>&lt;code>-a 3&lt;/code>：使用掩码模式&lt;/li>
&lt;li>&lt;code>?d&lt;/code>：每一位是数字&lt;/li>
&lt;li>&lt;code>--increment&lt;/code>：开启位数逐步尝试,从 6 位递增至 9 位&lt;/li>
&lt;/ul>
&lt;p>运行中的状态输出示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Status...........: Exhausted
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hash.Mode........: 11300 (Bitcoin/Litecoin wallet.dat)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recovered........: 0/1 (0.00%) Digests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Progress.........: 100.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The wordlist or mask that you are using is too small.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果破解成功,终端会显示类似：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$bitcoin$... : myoldpass2020&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时候你就可以拿着这个密码重新打开 Bitcoin Core 钱包.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="额外说明">&lt;span>额外说明&lt;/span>
 &lt;a href="#%e9%a2%9d%e5%a4%96%e8%af%b4%e6%98%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>如果你设置的密码较为复杂（如字母、符号、大小写组合）,纯掩码暴力破解几乎不现实.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用字典攻击,例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hashcat -m &lt;span class="m">11300&lt;/span> wallet.hash -a &lt;span class="m">0&lt;/span> rockyou.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>千万不要将 wallet.dat 上传到任何不可信网站,即使它声称“免费恢复”或“AI破解”——这很可能是诈骗.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本方法适用于你&lt;strong>已拥有本地 wallet.dat 文件且忘记密码&lt;/strong>的场景.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>这是一个完全离线、透明、受控的恢复流程,适用于你希望亲自操作而不依赖第三方服务的情况.如果你使用的是冷钱包、遗忘了早期钱包密码,这种方式是目前最稳妥的尝试路径.&lt;/p></description></item><item><title>本地构造TronTransaction转账交易</title><link>https://www.lucas6.xyz/posts/building-trontransaction/</link><pubDate>Fri, 25 Jul 2025 22:30:00 +0800</pubDate><guid>https://www.lucas6.xyz/posts/building-trontransaction/</guid><category domain="https://www.lucas6.xyz/categories/blockchain/">Blockchain</category><category domain="https://www.lucas6.xyz/categories/tron/">TRON</category><category domain="https://www.lucas6.xyz/categories/python/">Python</category><description>&lt;p>在实际开发中,某些场景要求我们对交易过程具备更高的可控性与安全性.比如在硬件钱包中使用私钥签名,或在冷隔离环境下进行离线交易构造时,必须避免依赖 TRON 节点的 &lt;code>createtransaction&lt;/code> 接口.这就需要我们&lt;strong>在本地构造交易结构、手动填入区块数据并完成签名&lt;/strong>,再广播至主网.&lt;/p>
&lt;p>本文完整的 Python 代码已托管：&lt;/p>
&lt;p>📎 &lt;a href="https://github.com/lucas556/Blockchain-Tools/blob/main/TRON/Offline_transactions.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/lucas556/Blockchain-Tools/blob/main/TRON/Offline_transactions.py&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="官方接口与本地构造的区别">&lt;span>官方接口与本地构造的区别&lt;/span>
 &lt;a href="#%e5%ae%98%e6%96%b9%e6%8e%a5%e5%8f%a3%e4%b8%8e%e6%9c%ac%e5%9c%b0%e6%9e%84%e9%80%a0%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>对比项&lt;/th>
 &lt;th>官方 createtransaction 接口&lt;/th>
 &lt;th>本地构造流程&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>构造行为&lt;/td>
 &lt;td>节点服务端生成交易结构&lt;/td>
 &lt;td>客户端全流程手动构造&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>安全控制&lt;/td>
 &lt;td>交易内容与结构暴露于远程节点&lt;/td>
 &lt;td>整个过程在本地完成,避免隐私泄露&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>灵活性&lt;/td>
 &lt;td>固定字段结构,较难扩展&lt;/td>
 &lt;td>自定义区块引用、时间、签名等细节&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>适用场景&lt;/td>
 &lt;td>适合热钱包、高速交互&lt;/td>
 &lt;td>适合冷钱包、隔离签名、多签、审计分析&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 class="heading-element" id="构造流程概览">&lt;span>构造流程概览&lt;/span>
 &lt;a href="#%e6%9e%84%e9%80%a0%e6%b5%81%e7%a8%8b%e6%a6%82%e8%a7%88" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>这里使用 Python 代码完成以下步骤：&lt;/p>
&lt;ol>
&lt;li>调用 &lt;code>getblock&lt;/code> 接口获取最新块引用&lt;/li>
&lt;li>构造 TransferContract 类型的交易结构&lt;/li>
&lt;li>填充区块字段、地址、金额、过期时间、时间戳&lt;/li>
&lt;li>使用 secp256k1 私钥进行签名&lt;/li>
&lt;li>生成 txID&lt;/li>
&lt;li>广播交易到主网&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 class="heading-element" id="注意">&lt;span>注意&lt;/span>
 &lt;a href="#%e6%b3%a8%e6%84%8f" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="地址格式转换">&lt;span>地址格式转换&lt;/span>
 &lt;a href="#%e5%9c%b0%e5%9d%80%e6%a0%bc%e5%bc%8f%e8%bd%ac%e6%8d%a2" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>Tron 地址需通过 base58 解码为 hex 字符串,且必须以 &lt;code>41&lt;/code> 开头（代表主网地址）.若未严格使用 &lt;code>base58.b58decode_check&lt;/code> 函数,会导致签名无效或节点拒绝交易.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">decoded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base58&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b58decode_check&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base58_address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">decoded&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;41&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Invalid Tron address&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 class="heading-element" id="区块引用字段要求">&lt;span>区块引用字段要求&lt;/span>
 &lt;a href="#%e5%8c%ba%e5%9d%97%e5%bc%95%e7%94%a8%e5%ad%97%e6%ae%b5%e8%a6%81%e6%b1%82" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>每笔交易必须携带：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ref_block_bytes&lt;/code>: 当前区块高度对 65536 的模&lt;/li>
&lt;li>&lt;code>ref_block_hash&lt;/code>: 区块 ID 前 8 字节（16 hex 字符）&lt;/li>
&lt;/ul>
&lt;p>这两者必须与最新块匹配,否则将返回 &lt;code>INVALID_BLOCK_REFERENCE&lt;/code>.&lt;/p>
&lt;hr>
&lt;h3 class="heading-element" id="签名方式">&lt;span>签名方式&lt;/span>
 &lt;a href="#%e7%ad%be%e5%90%8d%e6%96%b9%e5%bc%8f" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>使用标准 secp256k1 曲线进行 ECDSA 签名（SHA-256 摘要）,代码中使用 &lt;code>cryptography.hazmat&lt;/code> 库完成.注意,签名必须转 hex,并以数组形式存放：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;signature&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;hex_encoded_signature&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 class="heading-element" id="字节结构需遵循协议">&lt;span>字节结构需遵循协议&lt;/span>
 &lt;a href="#%e5%ad%97%e8%8a%82%e7%bb%93%e6%9e%84%e9%9c%80%e9%81%b5%e5%be%aa%e5%8d%8f%e8%ae%ae" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>原始交易数据需严格按 TRON protobuf 编码规则手动构造,包括 tag 编号、顺序、字段类型.该代码实现适用于标准的 TransferContract,其他合约类型需调整字段顺序与类型标记.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="应用场景举例">&lt;span>应用场景举例&lt;/span>
 &lt;a href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af%e4%b8%be%e4%be%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>硬件钱包交互&lt;/strong>：仅接受交易结构,不依赖 createtransaction 接口,可配合 Ledger、Trezor 等使用&lt;/li>
&lt;li>&lt;strong>冷钱包离线签名&lt;/strong>：在 air-gapped 环境下构造 raw_data 并签名后导出&lt;/li>
&lt;li>&lt;strong>合规审计分析工具&lt;/strong>：可以还原交易结构与 txID,辅助监管与链上取证&lt;/li>
&lt;li>&lt;strong>多签钱包或聚合交易系统&lt;/strong>：可灵活控制多笔交易批量构造与签名行为&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>从签名中恢复账户公钥</title><link>https://www.lucas6.xyz/posts/sig-recovery-pubkey/</link><pubDate>Tue, 06 May 2025 00:00:00 +0000</pubDate><guid>https://www.lucas6.xyz/posts/sig-recovery-pubkey/</guid><category domain="https://www.lucas6.xyz/categories/blockchain/">Blockchain</category><category domain="https://www.lucas6.xyz/categories/security/">Security</category><description>&lt;p>文中所有数据为虚构,可根据实际情况从区块链获取.&lt;/p>
&lt;h4 class="heading-element" id="注意使用助记词bip39bip44生成的地址使用了path每个地址的公钥也不同即不同的链的公钥和私钥是不同的不适合使用该方法无法使用公钥跨链追踪">&lt;span>注意:使用助记词(bip39/bip44)生成的地址使用了path,每个地址的公钥也不同(即不同的链的公钥和私钥是不同的),不适合使用该方法(无法使用公钥跨链追踪).&lt;/span>
 &lt;a href="#%e6%b3%a8%e6%84%8f%e4%bd%bf%e7%94%a8%e5%8a%a9%e8%ae%b0%e8%af%8dbip39bip44%e7%94%9f%e6%88%90%e7%9a%84%e5%9c%b0%e5%9d%80%e4%bd%bf%e7%94%a8%e4%ba%86path%e6%af%8f%e4%b8%aa%e5%9c%b0%e5%9d%80%e7%9a%84%e5%85%ac%e9%92%a5%e4%b9%9f%e4%b8%8d%e5%90%8c%e5%8d%b3%e4%b8%8d%e5%90%8c%e7%9a%84%e9%93%be%e7%9a%84%e5%85%ac%e9%92%a5%e5%92%8c%e7%a7%81%e9%92%a5%e6%98%af%e4%b8%8d%e5%90%8c%e7%9a%84%e4%b8%8d%e9%80%82%e5%90%88%e4%bd%bf%e7%94%a8%e8%af%a5%e6%96%b9%e6%b3%95%e6%97%a0%e6%b3%95%e4%bd%bf%e7%94%a8%e5%85%ac%e9%92%a5%e8%b7%a8%e9%93%be%e8%bf%bd%e8%b8%aa" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>本文代码已托管：
📎 &lt;a href="https://github.com/lucas556/Blockchain-Tools/blob/main/TRON/sig2pub.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/lucas556/Blockchain-Tools/blob/main/TRON/sig2pub.py&lt;/a>&lt;/p>
&lt;h2 class="heading-element" id="为什么要恢复公钥">&lt;span>为什么要恢复公钥？&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e6%81%a2%e5%a4%8d%e5%85%ac%e9%92%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>在区块链的世界里,私钥签名、公钥验证是最基本也最重要的安全机制之一.&lt;/p>
&lt;p>我们通常：&lt;/p>
&lt;ul>
&lt;li>使用私钥对一笔交易进行签名&lt;/li>
&lt;li>网络节点用公钥验证这笔交易是否合法&lt;/li>
&lt;/ul>
&lt;h2 class="heading-element" id="背景知识">&lt;span>背景知识&lt;/span>
 &lt;a href="#%e8%83%8c%e6%99%af%e7%9f%a5%e8%af%86" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="签名结构">&lt;span>签名结构&lt;/span>
 &lt;a href="#%e7%ad%be%e5%90%8d%e7%bb%93%e6%9e%84" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>区块链签名基于椭圆曲线 secp256k1,结构通常为 (r, s, v)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>r&lt;/code>：签名的第一部分&lt;/li>
&lt;li>&lt;code>s&lt;/code>：签名的第二部分&lt;/li>
&lt;li>&lt;code>v&lt;/code>：恢复参数,用于帮助从签名中恢复对应的公钥&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="raw_data-是什么">&lt;span>raw_data 是什么？&lt;/span>
 &lt;a href="#raw_data-%e6%98%af%e4%bb%80%e4%b9%88" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>&lt;code>raw_data&lt;/code>：是一笔交易在签名前的原始字节数据,系统会先对其 SHA256 响应,将响应结果用于签名.&lt;/p>
&lt;h2 class="heading-element" id="核心原理简图">&lt;span>核心原理简图&lt;/span>
 &lt;a href="#%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86%e7%ae%80%e5%9b%be" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">raw_data --SHA256--&amp;gt; message_hash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signature (r, s, v) + message_hash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> recover → public key&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 class="heading-element" id="使用-python-实现公钥恢复">&lt;span>使用 Python 实现公钥恢复&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8-python-%e5%ae%9e%e7%8e%b0%e5%85%ac%e9%92%a5%e6%81%a2%e5%a4%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="安装依赖">&lt;span>安装依赖&lt;/span>
 &lt;a href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install eth-keys&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="编写恢复函数">&lt;span>编写恢复函数&lt;/span>
 &lt;a href="#%e7%bc%96%e5%86%99%e6%81%a2%e5%a4%8d%e5%87%bd%e6%95%b0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">hashlib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eth_keys.datatypes&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Signature&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">recover_public_key_from_tron_signature&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_data_hex&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signature_hex&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">raw_data_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_data_hex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message_hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hashlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sha256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_data_bytes&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">digest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">signature_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signature_hex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signature_bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;签名必须是 65 字节 (r:32 + s:32 + v:1)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signature_bytes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signature_bytes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">signature_bytes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">27&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">v&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">27&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Signature&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vrs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recover_public_key_from_msg_hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message_hash&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">public_key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hex&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="示例演示">&lt;span>示例演示&lt;/span>
 &lt;a href="#%e7%a4%ba%e4%be%8b%e6%bc%94%e7%a4%ba" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">raw_data_hex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0a0265782208706c61792d6d6f6465120f0a0b08c0843d1215e1a0e7c2d103&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">signature_hex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;7db18bd6ccfffd4f8a5c208a3fd3f34d8f6e2db6f6ea84539b1b3e42b3d47809&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;79f18e5f741188cb80795d5f8a590b92edbb3e351c80e58208e7b4bbdcbb4ffb1b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recover_public_key_from_tron_signature&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_data_hex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signature_hex&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>输出结果：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Message Hash (SHA256 of raw_data): 9f1430d6ee3d00b8bd5f2a78cbf60b683bdd3d3e1a7b2cf361942c5e110ce1a1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Parsed Signature:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r = 0x7db18bd6ccfffd4f8a5c208a3fd3f34d8f6e2db6f6ea84539b1b3e42b3d47809
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s = 0x79f18e5f741188cb80795d5f8a590b92edbb3e351c80e58208e7b4bbdcbb4ffb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v = 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recovered Public Key (hex): 04a3f5d0c72ae1955bbf61a69b276bda7e3a7dcff4790d85e3c166e2c99f3b37d3d5f31a7e8876e37e63c6d2dfd4717e7e8c5f8c99b624d6c1441188ac11bca5ed&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该公钥为未压缩格式,长度为 130 个 hex 字符 (65 字节),前缀 &lt;code>04&lt;/code> 表示未压缩格式.&lt;/p></description></item><item><title>基于区块链交易公钥在多链进行跨链追查: 原理与实践</title><link>https://www.lucas6.xyz/posts/tracking-transactions-multiple-pubkey/</link><pubDate>Fri, 28 Feb 2025 01:00:00 +0800</pubDate><guid>https://www.lucas6.xyz/posts/tracking-transactions-multiple-pubkey/</guid><category domain="https://www.lucas6.xyz/categories/blockchain/">Blockchain</category><category domain="https://www.lucas6.xyz/categories/multi-chain/">Multi-Chain</category><category domain="https://www.lucas6.xyz/categories/security/">Security</category><description>&lt;p>随着区块链技术的不断发展,越来越多的项目和资金分散在不同的区块链网络中.对于合规审计、安全追踪和资金流动分析等场景,如何确定同一个私钥是否在多条链上产生实际交易,往往是突破口之一.本文将介绍一个&lt;strong>普适的技术思路&lt;/strong>：通过在某条链(如以太坊)获取交易公钥,再将其转换到另一条采用相同椭圆曲线(secp256k1)的链(如比特币),进而在该链上验证是否有对应的签名交易,从而确认是否确系同一私钥所控.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="1-从以太坊交易中获取公钥">&lt;span>1. 从以太坊交易中获取公钥&lt;/span>
 &lt;a href="#1-%e4%bb%8e%e4%bb%a5%e5%a4%aa%e5%9d%8a%e4%ba%a4%e6%98%93%e4%b8%ad%e8%8e%b7%e5%8f%96%e5%85%ac%e9%92%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="11-为什么能获取公钥">&lt;span>1.1 为什么能获取公钥？&lt;/span>
 &lt;a href="#11-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%83%bd%e8%8e%b7%e5%8f%96%e5%85%ac%e9%92%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>在以太坊中,每一笔交易都会包含签名字段 &lt;code>(v, r, s)&lt;/code>,以及待签名消息的哈希（通常是交易哈希或更底层的 RLP 编码哈希）.以太坊提供了名为 &lt;code>ecrecover&lt;/code> 的机制,能从 &lt;code>(v, r, s)&lt;/code> 与消息哈希中&lt;strong>恢复&lt;/strong>出用于签名的完整公钥.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>签名字段&lt;/strong>
&lt;ul>
&lt;li>&lt;code>v&lt;/code>：恢复标记（包含链 ID 信息或椭圆曲线恢复信息）&lt;/li>
&lt;li>&lt;code>r&lt;/code>、&lt;code>s&lt;/code>：签名的核心数据,分别对应椭圆曲线的 x 坐标部分&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>公钥恢复&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ecrecover(msgHash, v, r, s)&lt;/code> → &lt;strong>非压缩公钥&lt;/strong>（65 字节,前缀 &lt;code>0x04&lt;/code> + X/Y 坐标）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 class="heading-element" id="12-技术流程">&lt;span>1.2 技术流程&lt;/span>
 &lt;a href="#12-%e6%8a%80%e6%9c%af%e6%b5%81%e7%a8%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>提取交易信息&lt;/strong>&lt;br>
在区块浏览器（如 Etherscan）或通过节点 RPC 接口,找到目标地址发起的一笔交易,记录其中的：&lt;/p>
&lt;ul>
&lt;li>&lt;code>v, r, s&lt;/code>&lt;/li>
&lt;li>交易哈希（或待签名数据哈希）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调用 ecrecover&lt;/strong>&lt;br>
可以在本地脚本（如 web3.py、ethers.js 等）中使用内置函数 &lt;code>ecrecover&lt;/code>(或等效实现)来恢复公钥.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>验证正确性&lt;/strong>&lt;br>
以太坊地址 = &lt;code>Keccak-256(公钥去掉前缀 0x04 后 64 字节)&lt;/code> 的&lt;strong>后 20 字节&lt;/strong>.&lt;br>
将恢复得到的地址与交易发起地址比对,如果一致则说明公钥获取无误.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>完成上述步骤后,我们便得到了该以太坊地址对应的&lt;strong>真实公钥&lt;/strong>（记为 &lt;code>PubKey_ETH&lt;/code>）.由于以太坊和比特币都采用 &lt;strong>secp256k1&lt;/strong> 曲线,这一公钥可被用于&lt;strong>任意&lt;/strong>基于 secp256k1 的区块链上进行地址推导.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="2-转换为比特币地址并在链上追查">&lt;span>2. 转换为比特币地址并在链上追查&lt;/span>
 &lt;a href="#2-%e8%bd%ac%e6%8d%a2%e4%b8%ba%e6%af%94%e7%89%b9%e5%b8%81%e5%9c%b0%e5%9d%80%e5%b9%b6%e5%9c%a8%e9%93%be%e4%b8%8a%e8%bf%bd%e6%9f%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 class="heading-element" id="21-比特币地址生成规则">&lt;span>2.1 比特币地址生成规则&lt;/span>
 &lt;a href="#21-%e6%af%94%e7%89%b9%e5%b8%81%e5%9c%b0%e5%9d%80%e7%94%9f%e6%88%90%e8%a7%84%e5%88%99" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>在比特币链上,最经典的地址生成方式是 &lt;strong>P2PKH&lt;/strong>（Pay to Public Key Hash）,即我们常见的以 &lt;code>1&lt;/code> 开头的比特币主网地址.生成流程概述如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>准备公钥&lt;/strong>&lt;br>
一般使用&lt;strong>压缩公钥&lt;/strong>（33 字节,前缀 &lt;code>0x02&lt;/code> 或 &lt;code>0x03&lt;/code>）更常见,也可以使用非压缩公钥（65 字节）,只是地址会不同.&lt;/p>
&lt;ul>
&lt;li>若 &lt;code>PubKey_ETH&lt;/code> 是非压缩格式,需要根据 &lt;code>Y&lt;/code> 坐标的奇偶,转换出对应压缩格式.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>双哈希&lt;/strong>&lt;br>
先对公钥做 &lt;code>SHA-256&lt;/code>,再对结果做 &lt;code>RIPEMD-160&lt;/code> → 得到 20 字节的 &lt;strong>PubKey Hash&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本前缀与校验和&lt;/strong>&lt;br>
在主网下,P2PKH 前缀为 &lt;code>0x00&lt;/code>；然后对 “前缀 + PubKey Hash” 再做两次 &lt;code>SHA-256&lt;/code>,取前 4 字节作为校验和,拼接在后面.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Base58Check 编码&lt;/strong>&lt;br>
最终可得到典型的 &lt;code>1xxxx...&lt;/code> 形式的比特币地址（记为 &lt;code>Addr_BTC&lt;/code>）.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>示例（Python 伪代码）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pub_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">compress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub_key_65&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 若需压缩&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sha_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SHA256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pub_key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ripe_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RIPEMD160&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sha_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ripe_1&lt;/span> &lt;span class="c1"># 0x00为比特币P2PKH前缀&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">checksum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SHA256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SHA256&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">))[:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">address_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payload&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">checksum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">btc_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Base58CheckEncode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address_bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 形如 1xxxx...&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 class="heading-element" id="22-在比特币链上验证实际交易">&lt;span>2.2 在比特币链上验证实际交易&lt;/span>
 &lt;a href="#22-%e5%9c%a8%e6%af%94%e7%89%b9%e5%b8%81%e9%93%be%e4%b8%8a%e9%aa%8c%e8%af%81%e5%ae%9e%e9%99%85%e4%ba%a4%e6%98%93" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>有了 &lt;code>Addr_BTC&lt;/code> 后,我们需要在比特币区块浏览器（如 blockchain.com、btc.com 等）查询该地址是否&lt;strong>真有&lt;/strong>链上交易,且由它&lt;strong>主动&lt;/strong>发起过交易（即该地址作为输入的交易）.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>查询交易记录&lt;/strong>&lt;br>
如果 &lt;code>Addr_BTC&lt;/code> 从未有任何交易或仅仅收到过 BTC 而没有消费（花费）,则说明尚无证据表明&lt;strong>同一个私钥&lt;/strong>实际在比特币链上操作过.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>获取公钥以再次验证&lt;/strong>&lt;br>
在比特币的 P2PKH 脚本中,当一个地址&lt;strong>花费&lt;/strong>对应的 UTXO 时,输入脚本会包含&lt;strong>签名&lt;/strong>和&lt;strong>公钥&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>区块浏览器通常可在输入脚本详情里看到签名和公钥（或解析后的信息）.&lt;/li>
&lt;li>若该公钥与 &lt;code>PubKey_ETH&lt;/code>（或其压缩/非压缩等效形式）&lt;strong>完全一致&lt;/strong>,则可确认这是同一个私钥在比特币上签名的凭证.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>由此,我们实现了从以太坊到比特币的“&lt;strong>公钥跨链验证&lt;/strong>”——只有当在比特币区块上也能观察到该公钥用于签名的交易,才说明目标私钥确实跨链使用了.&lt;/p>
&lt;hr>
&lt;h2 class="heading-element" id="3-多链追查的意义">&lt;span>3. 多链追查的意义&lt;/span>
 &lt;a href="#3-%e5%a4%9a%e9%93%be%e8%bf%bd%e6%9f%a5%e7%9a%84%e6%84%8f%e4%b9%89" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>一旦确认同一个私钥同时在以太坊和比特币上都有交易签名,就可以在更广的范围内分析该私钥的资金流向和交易行为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>合规审计 / AML（反洗钱）&lt;/strong>&lt;br>
监管机构或安全部门可以根据已知的以太坊地址,顺藤摸瓜查看是否在比特币网络也有活跃,进而更全面地掌握可疑资金的跨链转移路径.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资产管理与风控&lt;/strong>&lt;br>
一些多链钱包用户可能有意或无意地&lt;strong>复用&lt;/strong>同一个私钥.安全审计时需注意这一点——一旦某条链上私钥泄露,其他链上地址也会面临风险.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>研究和数据分析&lt;/strong>&lt;br>
对多链生态的学术研究、市场分析或用户画像时,也可借助此方法发现跨链关联,为高维度数据分析提供帮助.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 class="heading-element" id="4-注意事项">&lt;span>4. 注意事项&lt;/span>
 &lt;a href="#4-%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>仅能对“主动发起过”交易的地址恢复公钥&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在以太坊上,如果一个地址仅接收代币或转账而从未发起过交易,则无法通过 &lt;code>ecrecover&lt;/code> 获取它的公钥.&lt;/li>
&lt;li>在比特币上,只有当某地址“花费”了它的 UTXO,才会在交易输入脚本里暴露公钥.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同一私钥 ≠ 同一助记词&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>助记词 (BIP39) 可以派生出许多子私钥.即使两个地址共用同一个私钥,也不一定是同一助记词；用户也可能手工导入相同私钥到不同钱包.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>极小概率碰撞&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>理论上,不同助记词或随机生成方式可能极低概率地产生相同私钥,但概率极其微小（约 2^-256）,几乎可忽略不计.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>隐私与匿名&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>一旦在一条链上签名,就有可能被恢复出公钥,从而推导到其他链可能的地址；这在某些情况下会降低用户的匿名性与隐私保护.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 class="heading-element" id="5-总结">&lt;span>5. 总结&lt;/span>
 &lt;a href="#5-%e6%80%bb%e7%bb%93" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>“&lt;strong>基于区块链交易公钥在多链进行跨链追查&lt;/strong>”的核心思路就是：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>先在一条链（如以太坊）上,通过已发起交易恢复公钥&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>将该公钥按照其他采用 secp256k1 曲线的区块链（如比特币）的地址生成规则进行转换&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>在目标链上查询是否有实际签名交易&lt;/strong>,并可进一步对比公钥来确认.&lt;/li>
&lt;/ol>
&lt;p>如果确有对应的签名交易,那就可以确定同一个私钥跨链使用,从而对资金流动和交易行为做更深层次的分析.这种方法在安全审计、合规检查、反洗钱以及多链资产研究等场景中都扮演着重要角色,为区块链行业的健康有序发展提供了技术支持.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>简而言之&lt;/strong>,只要能在以太坊上获取到实际公钥,就可在比特币乃至更多基于 secp256k1 的链上推导相应地址并查验是否存在签名交易.若确认有实际交易且公钥匹配,即可判定由&lt;strong>同一个私钥&lt;/strong>控制.这一跨链验证思路,对于打通区块链生态和深入挖掘跨链资金流向至关重要.&lt;/p>&lt;/blockquote></description></item></channel></rss>